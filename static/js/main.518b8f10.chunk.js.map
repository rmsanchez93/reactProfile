{"version":3,"sources":["components/Header/Header.js","components/ImgMediaCard/ImgMediaCard.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","react_default","a","createElement","className","titleHeader","withStyles","card","maxWidth","media","objectFit","classes","Card_default","CardActionArea_default","CardMedia_default","component","alt","title","height","image","imgStatic","CardContent_default","Typography_default","gutterBottom","variant","sum","CardActions_default","Button_default","size","color","App","Header_Header","map","project","i","ImgMediaCard_ImgMediaCard","key","id","el","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kMAGe,SAASA,EAAQC,GAC5B,OACIC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAClBH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMK,aAC7BJ,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,6MCmDOG,2BAhDA,CACbC,KAAM,CACJC,SAAU,KAEZC,MAAO,CAELC,UAAW,UA0CAJ,CAtCf,SAAsBN,GAAO,IACnBW,EAAYX,EAAZW,QACR,OACEV,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAME,UAAWO,EAAQJ,MACvBN,EAAAC,EAAAC,cAACU,EAAAX,EAAD,KACED,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,CACEa,UAAU,MACVC,IAAKhB,EAAMiB,MACXb,UAAWO,EAAQF,MACnBS,OAAO,MACPC,MAAOnB,EAAMoB,UACbH,MAAOjB,EAAMiB,QAEfhB,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,KACED,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAYqB,cAAY,EAACC,QAAQ,KAAKT,UAAU,MAC7Cf,EAAMiB,OAEThB,EAAAC,EAAAC,cAACmB,EAAApB,EAAD,CAAYa,UAAU,KACnBf,EAAMyB,OAIbxB,EAAAC,EAAAC,cAACuB,EAAAxB,EAAD,KACED,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CAAQ0B,KAAK,QAAQC,MAAM,WAA3B,aAGA5B,EAAAC,EAAAC,cAACwB,EAAAzB,EAAD,CAAQ0B,KAAK,QAAQC,MAAM,WAA3B,oBCWOC,mLAxBX,OACE7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC4B,EAAD,CACA1B,YAAc,sBACdJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACfH,EAAAC,EAAAC,cAAA,OAAKC,UAAW,UACdH,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,4IA9BS,CACb,CACEc,MAAO,SACPQ,IAAK,oHACLN,MAAO,qCAET,CACEF,MAAO,+BACPQ,IAAK,+FACLN,MAAO,uCAET,CACEF,MAAO,kBACPQ,IAAK,qKACLN,MAAO,4CAET,CACEF,MAAO,qBACPQ,IAAK,mFACLN,MAAO,oCAaKa,IAAI,SAACC,EAAUC,GAAX,OAAgBjC,EAAAC,EAAAC,cAACgC,EAAD,CAAcC,IAAKF,EAAGG,GAAKH,EAAGjB,MAAOgB,EAAQhB,MAAOQ,IAAKQ,EAAQR,IAAKL,UAAWa,EAAQd,WAEzHlB,EAAAC,EAAAC,cAAA,OAAKC,UAAY,UACfH,EAAAC,EAAAC,cAAA,oBACAF,EAAAC,EAAAC,cAAA,2DACAF,EAAAC,EAAAC,cAAA,WAtCO,CAAC,mBAAmB,UAAW,WAAY,QAAS,UAAW,kBAAkB,iBAAiB,mBAAoB,UAAW,KAAM,YAuCtI6B,IAAI,SAAAM,GAAE,OAAIrC,EAAAC,EAAAC,cAAA,MAAIkC,GAAIC,GAAKA,eAzCvBC,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.518b8f10.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.css'\r\n\r\nexport default function Header (props){\r\n    return(\r\n        <header className=\"App-header\">\r\n        <h1 className=\"title\">{props.titleHeader}</h1>\r\n        <hr></hr>\r\n        <h3>MERN stack enthusiast looking for a Modern Work Environment</h3>          \r\n          \r\n        </header>\r\n    )\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst styles = {\r\n  card: {\r\n    maxWidth: 345,\r\n  },\r\n  media: {\r\n    // ⚠️ object-fit is not supported by IE 11.\r\n    objectFit: 'cover',\r\n  },\r\n};\r\n\r\nfunction ImgMediaCard(props) {\r\n  const { classes } = props;\r\n  return (\r\n    <Card className={classes.card}>\r\n      <CardActionArea>\r\n        <CardMedia\r\n          component=\"img\"\r\n          alt={props.title}\r\n          className={classes.media}\r\n          height=\"140\"\r\n          image={props.imgStatic}\r\n          title={props.title}\r\n        />\r\n        <CardContent>\r\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n            {props.title}\r\n          </Typography>\r\n          <Typography component=\"p\">\r\n            {props.sum}\r\n          </Typography>\r\n        </CardContent>\r\n      </CardActionArea>\r\n      <CardActions>\r\n        <Button size=\"small\" color=\"primary\">\r\n          View Code\r\n        </Button>\r\n        <Button size=\"small\" color=\"primary\">\r\n          View Project\r\n        </Button>\r\n      </CardActions>\r\n    </Card>\r\n  );\r\n}\r\n\r\nImgMediaCard.propTypes = {\r\n  classes: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default withStyles(styles)(ImgMediaCard);","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header/Header'\nimport ImgMediaCard from './components/ImgMediaCard/ImgMediaCard'\n\n\n\n\nclass App extends Component {\n  render() {\n    let skills = ['MongoDB/Mongoose','Express', 'React.js', 'Redux', 'Node.js', 'MySQL/Sequelize','Javascript/ES6','Project Planning', 'Angular', 'C#', 'Electron',]\n    let projects = [\n      {\n        title: 'BarPar',\n        sum: 'MERN Stack- Inventory, Employee and Bar Relations Application. Worked on MongoDB Schemas and Inventory components',\n        image: '/static/media/barpar.ab9b526a.png'\n      },\n      {\n        title: 'Fortress Fabrication WebPage',\n        sum: 'React front-end app. Soon to be an active online webstore. Built this for a fabrication shop',\n        image: '/static/media/fortress.5622592d.jpg'\n      },\n      {\n        title: 'Train Scheduler',\n        sum: 'Moment.js and firebase application, built on a static HTML page. Application gives user next available train relative to current time given User input in minutes.',\n        image: '/static/media/trainschedule.74a6ac43.png'\n      },\n      {\n        title: 'LIRI- Node Project',\n        sum: 'Pure node.js project using dotenv library and accessing Spotify and Twitter APIs',\n        image: '/static/media/Liri.89b97854.png'\n      }\n\n                          ];\n    return (\n      <div className=\"App\">\n        <Header \n        titleHeader = '{Raul M. Sanchez}'/>\n        <div className='bifoldContainer'>\n        <div className= 'resume'>\n          <h1>Past Projects</h1>\n          <p> List of projects I've worked on using skills spanning from React SPA's, Node.js, HTML/CSS, MySQL, MongoDB, Javascript, Jquery </p>\n          \n          {projects.map((project , i)=> <ImgMediaCard key={i} id= {i} title={project.title} sum={project.sum} imgStatic={project.image}/>)}\n        </div>\n        <div className = 'skills'>\n          <h1>Skills</h1>\n          <p>Technologies and Methodologies I've worked on </p>\n          <hr/>\n          {skills.map(el => <li id={el}>{el}</li>)}\n          \n        </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}